{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "JSchema",
	"scopeName": "source.jschema",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#value"
		}
	],
	"repository": {
		"array": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.array.begin.jschema"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.jschema"
				}
			},
			"name": "meta.structure.array.jschema",
			"patterns": [
				{
					"include": "#value"
				},
				{
					"match": ",",
					"name": "punctuation.separator.array.jschema"
				},
				{
					"include": "#comments"
				},
				{
					"match": "[^\\s\\]]",
					"name": "invalid.illegal.expected-array-separator.json"
				}
			]
		},
		"object": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.dictionary.begin.json"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.dictionary.end.json"
				}
			},
			"name": "meta.structure.dictionary.json",
			"patterns": [
				{
					"include": "#annotations"
				},
				{
					"include": "#comments"
				},
				{
					"comment": "the JSON object key",
					"include": "#objectkey"
				},
				{
					"comment": "the jschema usertype JSON object key",
					"include": "#objectkey_subschema"
				},
				{
					"begin": ":",
					"beginCaptures": {
						"0": {
							"name": "punctuation.separator.dictionary.key-value.json"
						}
					},
					"end": "(,)|(?=\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.separator.dictionary.pair.json"
						}
					},
					"name": "meta.structure.dictionary.value.json",
					"patterns": [
						{
							"comment": "the JSON object value",
							"include": "#value"
						},
						{
							"match": "\\|",
							"name": "punctuation.separator.usertype.or.jschema"
						},
						{
							"include": "#annotations"
						},
						{
							"include": "#comments"
						},
						{
							"match": "[^\\s,]",
							"name": "invalid.illegal.expected-dictionary-separator.json"
						}
					]
				},
				{
					"match": "[^\\s\\}]",
					"name": "invalid.illegal.expected-dictionary-separator.json"
				}
			]
		},
		"constant": {
			"match": "\\b(?:true|false|null)\\b",
			"name": "constant.language.json.jschema.value.constant"
		},
		"number": {
			"match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
			"name": "constant.numeric.json.jschema.value.number"
		},
		"string": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.json"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.json"
				}
			},
			"name": "string.quoted.double.json.jschema.value.string",
			"patterns": [
				{
					"include": "#stringcontent"
				}
			]
		},
		"subschema": {
			"comment": "Subschema values (@some)",
			"name": "entity.other.attribute-name.jschema.value.subschema",
			"match": "@[a-zA-Z_][a-zA-Z_0-9]*"
		},
		"objectkey": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.support.type.property-name.begin.json"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.support.type.property-name.end.json"
				}
			},
			"name": "keyword.jschema.key",
			"patterns": [
				{
					"include": "#stringcontent"
				}
			]
		},
		"objectkey_subschema": {
			"match": "@[a-zA-Z_][a-zA-Z_0-9]*",
			"name": "keyword.jschema.key.subschema"
		},
		"stringcontent": {
			"patterns": [
				{
					"match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
					"name": "constant.character.escape.json"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unrecognized-string-escape.json"
				}
			]
		},
		"value": {
			"patterns": [
				{
					"include": "#constant"
				},
				{
					"include": "#number"
				},
				{
					"include": "#string"
				},
				{
					"include": "#array"
				},
				{
					"include": "#object"
				},
				{
					"include": "#subschema"
				},
				{
					"include": "#annotations"
				},
				{
					"include": "comments"
				}
			]
		},

		"comments": {
			"comment": "Have to define JApi comments, because it can be used inside JApi",
			"patterns": [
				{
					"name": "comment.block.jschema",
					"begin": "###",
					"end": "###",
					"patterns": [{"include": "#todo"}]
				},
				{
					"name": "comment.line.jschema",
					"begin": "#",
					"end": "$",
					"patterns": [{"include": "#todo"}]
				}
			]
		},
		"todo": {
			"patterns": [
				{
					"match": "\\b(TODO|todo|Todo)\\b((:)? .*)?",
					"name": "markup.italic jsight.comment.todo"
				}
			]
		},
		"annotations": {
			"patterns": [
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.jschema"
						}
					},
					"end": "\\*/",
					"name": "support.jschema.annotation.block",
					"patterns": [
						{
							"include": "#rules"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.jschema"
						}
					},
					"begin": "//",
					"end": "$\\n?",
					"name": "support.jschema.annotation.line",
					"patterns": [
						{
							"include": "#rules"
						},
						{
							"include": "#comments"
						}
					]
				}
			]
		},


		"rules": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#rulesObject"
				}
			]
		},
		"rulesObject": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.dictionary.begin.jschema.rules"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.dictionary.end.jschema.rules"
				}
			},
			"name": "meta.structure.dictionary.jschema.rules",
			"patterns": [
				{
					"begin": "enum",
					"beginCaptures": {"0": {"name": "support.type.property-name.jschema.rule.key"}},
					"end": "(,)|(?=\\})",
					"patterns": [
						{
							"include": "#rulesEnumValuesArray"
						},
						{
							"include": "#colonOrInvalid"
						}
					]
				},
				{
					"begin": "or",
					"beginCaptures": {"0": {"name": "support.type.property-name.jschema.rule.key"}},
					"end": "(,)|(?=\\})",
					"patterns": [
						{
							"include": "#rulesArrayOr"
						},
						{
							"include": "#colonOrInvalid"
						}
					]
				},
				{
					"begin": "type",
					"beginCaptures": {"0": {"name": "support.type.property-name.jschema.rule.key"}},
					"end": "(,)|(?=\\})",
					"patterns": [
						{
							"include": "#rulesQuotedType"
						},
						{
							"include": "#rulesSubschemaName"
						},
						{
							"include": "#colonOrInvalid"
						}
					]
				},
				{
					"begin": "regex",
					"beginCaptures": {"0": {"name": "support.type.property-name.jschema.rule.key"}},
					"end": "(,)|(?=\\})",
					"patterns": [
						{
							"include": "#rulesRegexString"
						},
						{
							"include": "#colonOrInvalid"
						}
					]
				},
				{
					"begin": "allOf",
					"beginCaptures": {"0": {"name": "support.type.property-name.jschema.rule.key"}},
					"end": "(,)|(?=\\})",
					"patterns": [
						{
							"include": "#rulesSubschemaName"
						},
						{
							"include": "#rulesSubschemaNamesArray"
						},
						{
							"include": "#colonOrInvalid"
						}
					]
				},
				{
					"begin": "additionalProperties",
					"beginCaptures": {"0": {"name": "support.type.property-name.jschema.rule.key"}},
					"end": "(,)|(?=\\})",
					"patterns": [
						{
							"include": "#rulesSubschemaName"
						},
						{
							"include": "#rulesQuotedType"
						},
						{
							"include": "#rulesBoolean"
						},
						{
							"include": "#colonOrInvalid"
						}
					]
				},
				{
					"comment": "Boolean rules",
					"begin": "\\bconst|optional|nullable|exclusiveMinimum|exclusiveMaximum\\b",
					"beginCaptures": {"0": {"name": "support.type.property-name.jschema.rule.key"}},
					"end": "(,)|(?=\\})",
					"patterns": [
						{
							"include": "#rulesBoolean"
						},
						{
							"include": "#colonOrInvalid"
						}
					]
				},
				{
					"comment": "Number rules",
					"begin": "\\bminLength|maxLength|minItems|maxItems|min|max|precision\\b",
					"beginCaptures": {"0": {"name": "support.type.property-name.jschema.rule.key"}},
					"end": "(,)|(?=\\})",
					"patterns": [
						{
							"include": "#rulesNumber"
						},
						{
							"include": "#colonOrInvalid"
						}
					]
				},
				{
					"match": ",",
					"name": "punctuation.separator.array.jschema.rules"
				},
				{
					"match": "[^\\s\\}]",
					"name": "invalid.illegal.expected-dictionary-separator.jschema.rules"
				}
			]
		},
		"rulesEnumValuesArray": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.array.begin.jschema.rules"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.jschema.rules"
				}
			},
			"name": "meta.structure.array.jschema.strings-array",
			"patterns": [
				{
					"include": "#rulesString"
				},
				{
					"include": "#rulesNumber"
				},
				{
					"include": "#rulesBoolean"
				},
				{
					"match": ",",
					"name": "punctuation.separator.array.jschema.rules"
				},
				{
					"match": "[^\\s\\]]",
					"name": "invalid.illegal.expected-array-separator.jschema.rules"
				}
			]
		},
		"rulesArrayOr": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.array.begin.jschema.rules"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.jschema.rules"
				}
			},
			"name": "meta.structure.array.jschema.rules",
			"patterns": [
				{
					"include": "#rulesObject"
				},
				{
					"include": "#rulesSubschemaName"
				},
				{
					"match": ",",
					"name": "punctuation.separator.array.jschema.rules"
				},
				{
					"match": "[^\\s\\]]",
					"name": "invalid.illegal.expected-array-separator.jschema.rules"
				}
			]
		},
		"rulesRegexString": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.jschema.rules.regex"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.jschema.rules.regex"
				}
			},
			"name": "constant.language.jschema.rule.value.regex",
			"patterns": [
				{
					"comment": "TODO: for now using common stringcontent",
					"include": "#stringcontent"
				}
			]
		},
		"rulesQuotedType": {
			"comment": "Supported internal types",
			"name": "constant.language.jschema.rule.value.type",
			"match": "\"\\b(string|integer|float|decimal|boolean|object|array|any|null|email|uri|uuid|date|datetime|enum|mixed)\\b\""
		},
		"rulesNumber": {
			"match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
			"name": "constant.language.jschema.rule.value.number"
		},
		"rulesString": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.jschema.rules"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.jschema.rules"
				}
			},
			"name": "constant.language.jschema.rule.value.string",
			"patterns": [
				{
					"comment": "TODO: for now using common stringcontent",
					"include": "#stringcontent"
				}
			]
		},
		"rulesBoolean": {
			"comment": "Have other scopes than booleans in values",
			"match": "\\b(?:true|false|null)\\b",
			"name": "constant.language.jschema.rule.value.boolean"
		},
		"rulesSubschemaName": {
			"name": "entity.other.attribute-name.jschema.rule.value.subschema",
			"match": "\"@[a-zA-Z_][a-zA-Z_0-9]*\""
		},
		"rulesSubschemaNamesArray": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.array.begin.jschema.rules"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.jschema.rules"
				}
			},
			"name": "meta.structure.array.jschema.subschema-array",
			"patterns": [
				{
					"include": "#rulesSubschemaName"
				},
				{
					"match": ",",
					"name": "punctuation.separator.array.jschema.rules"
				},
				{
					"match": "[^\\s\\]]",
					"name": "invalid.illegal.expected-array-separator.jschema.rules"
				}
			]
		},
		"colonOrInvalid": {
			"comment": "REUSABLE block",
			"patterns": [
				{
					"match": ":",
					"name": "punctuation.separator.dictionary.key-value.jschema.rules"
				},
				{
					"match": "[^\\s,]",
					"name": "invalid.illegal.expected-dictionary-separator.jschema.rules"
				}
			]
		},
		"commaOrInvalid": {
			"comment": "REUSABLE block",
			"patterns": [
				{
					"match": ":",
					"name": "punctuation.separator.dictionary.key-value.jschema.rules"
				},
				{
					"match": "[^\\s,]",
					"name": "invalid.illegal.expected-dictionary-separator.jschema.rules"
				}
			]
		}
	}
}