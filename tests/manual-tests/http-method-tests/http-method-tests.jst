  JSIGHT 0.3

  # URL tests
  URL /test-URL-independency
    GET  /* [ ! ] Check, that when you switch methods, 
            it is not switched in other endpoints. */
    POST  /* [ ! ] Check, that when you switch methods, 
            it is not switched in other endpoints. */
    PUT  /* [ ! ] Check, that when you switch methods, 
            it is not switched in other endpoints. */
    PATCH  /* [ ! ] Check, that when you switch methods, 
            it is not switched in other endpoints. */
    DELETE  /* [ ! ] Check, that when you switch methods, 
            it is not switched in other endpoints. */

  URL /test-URL
    GET
    POST
    PUT
    PATCH
    DELETE

  URL /test-URL/extremely-long-endpoint-which-is-so-long-sooo-long-that-it-is-almost-impossible-to-imagine-such-a-long-thing
    GET

  URL /test-URL/test-method-tabs-independency
    GET  /* [ ! ] Check, that when you switch methods, 
            it is not switched in other endpoints. */
    POST  /* [ ! ] Check, that when you switch methods, 
            it is not switched in other endpoints. */
    PUT  /* [ ! ] Check, that when you switch methods, 
            it is not switched in other endpoints. */
    PATCH  /* [ ! ] Check, that when you switch methods, 
            it is not switched in other endpoints. */
    DELETE  /* [ ! ] Check, that when you switch methods, 
            it is not switched in other endpoints. */

  URL /test-URL/test-path-parameters/{par1}
    Path
      {
        "par1": 1 // {min: 1}
      }
    GET  // Must be par1 only in "Path parameters".
    POST // Must be par1 only in "Path parameters".
    PUT  // Must be par1 only in "Path parameters".

  # Test keywords and path parameters

  GET    /test-keywords
  PUT    /test-keywords
  POST   /test-keywords
  PATCH  /test-keywords
  DELETE /test-keywords

  URL /test-keywords/under-URL
    GET
    PUT
    POST
    PATCH
    DELETE

  GET /test-keywords/any-path-parameters/{par1} // Check the `par1` parameter in the "Path parameters" section.
  
  URL /test-keywords/path-parameters/{par1}
    Path
    {
      "par1": "string value"
    }

  GET    /test-keywords/path-parameters/{par1} // Must be par1 only in "Path parameters".
  PUT    /test-keywords/path-parameters/{par1} // Must be par1 only in "Path parameters".
  POST   /test-keywords/path-parameters/{par1} // Must be par1 only in "Path parameters".
  PATCH  /test-keywords/path-parameters/{par1} // Must be par1 only in "Path parameters".
  DELETE /test-keywords/path-parameters/{par1} // Must be par1 only in "Path parameters".

  # Test annotation

  GET /test-annotation // [ ! ] Check this annotation.
    200 any

  # Test Description
  GET /test-description/no-parenthesis
    Description
      [ ! ] Check this description.

  GET /test-description/in-parenthesis
    Description
    (
      [ ! ] Check this description.

      Markdown and escaping features are tested in another test.
    )
    200 any // Nothing to check.

  # Test Path

  GET /test-path/common-one-parameter/{par1} // [ ! ] Check `par1` in "Path parameters" below.
    Path
    {
      "par1": 1 // [ ! ] Check this parameter.
    }

  GET /test-path/allOf/{par1} // [ ! ] Check `par1` in "Path parameters" below.
    Path
      {} // {allOf: "@commonPath"}

  GET /test-path/allOf-with-additional-parameters/{par1}/{par2} // [ ! ] Check `par1` and `par2` in "Path parameters" below.
    Path
      { // {allOf: "@commonPath"}
        "par2": 2
      }

  GET /test-path/reference/{par1}  // [ ! ] Check `par1` in "Path parameters" below.
    Path
      @commonPath

  GET /test-path/common-two-parameters/{par1}/{par2}  // [ ! ] Check `par1` and `par2` in "Path parameters" below.
    Path
      {
        "par1": 1, // Parameter 1.
        "par2": 2  // Parameter 2.
      }

  GET /test-path/test-path-parameters-gathered/{par1}/{par2} // [ ! ] Check in GET and POST `par1` and `par2` in "Path parameters" below.
    Path
    {
      "par1": 1 // Must be `par1` and `par2` here.
    }

  POST /test-path/test-path-parameters-gathered/{par1}/{par2} // [ ! ] Check in GET and POST `par1` and `par2` in "Path parameters" below.
    Path
    {
      "par2": "string" // Must be `par1` and `par2` here.
    }

  URL /test-path/url/{par1}
    Path 
    {
      "par1": 1 // [ ! ] Check this parameter.
    }

    GET // [ ! ] Check `par1` in Path parameters below.

  URL /test-path/url2/{par1}
    Path 
    {
      "par1": 1
    }

  POST /test-path/url2/{par1} // [ ! ] Check `par1` in Path parameters below.

  TYPE @commonPath // Thank you! No need to check this type and types below.
  {
    "par1": 1 // {min: 1} - Common path parameter.
  }

  # Test Query

  GET /test-query/common 
    Description
      1. [ ! ] Check **QueryExample** is shown.
      2. [ ! ] Check **Query** section is shown.
      3. [ ! ] Check `htmlFormEncoded` format is shown.
    Query "fields[field1]=S"
      {
        "fields": {      // {optional: true}
          "field1": "S", // {optional: true, enum: ["S", "L", "M"]}
          "field2": 12   // {optional: true, min: 0               }
        }
      }

  PUT /test-query/format-htmlFormEncoded
    Description
      1. [ ! ] Check **QueryExample** is shown.
      2. [ ! ] Check **Query** section is shown.
      3. [ ! ] Check `htmlFormEncoded` format is shown.
    Query "page=1" htmlFormEncoded
      {
        "page": 1
      }

  POST /test-query/format-noFormat
    Description
      1. [ ! ] Check `noFormat` is shown.
    Query "foo" noFormat
      "" // {type: "any"}

  PATCH /test-query/no-example
    Description
      1. [ ! ] Check that there is **no QueryExample** section.
      2. [ ! ] Check `htmlFormEncoded` format is shown.

    Query
      {
        "page": 1
      }

  PATCH /test-query/no-example-format-htmlFormEncoded
    Description
      1. [ ! ] Check that there is **no QueryExample** section.
      2. [ ! ] Check `htmlFormEncoded` format is shown.
    Query htmlFormEncoded
      {
        "page": 1
      }

  POST /test-query/no-example-format-noFormat
    Description
      1. [ ! ] Check that there is **no QueryExample** section.
      2. [ ! ] Check `noFormat` format is shown.
    Query noFormat
      "any" // You can put any string in query.

  GET /test-query/allOf // Test Query
    Description
      [ ! ] Check in the Query section:
      
      - `commonQueryField1`
      - `commonQueryField2`

    Query "commonQueryField1=1&commonQueryField2=30"
      {} // {allOf: "@commonQuery"}

  GET /test-query/allOf_and_additionalFields
    Description
      [ ! ] Check in the Query section:
      
      - `commonQueryField1`
      - `commonQueryField2`
      - `additionalFields`
        - `additionalField1`
        - `additionalField2`

    Query "commonQueryField1=1&commonQueryField2=30&additionalFields[additionalField1]=12"
      {                // {allOf: "@commonQuery"}
        "additionalFields": {      // {optional: true}
          "additionalField1": "S", // {optional: true, enum: ["S", "L", "M"]}
          "additionalField2": 12   // {optional: true, min: 0               }
        }
      }

  GET /test-query/very-long-query-string
    Query "verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_verylongquery_"
      "string"

  GET /test-query/url-encoded-quirks // TODO: we need create tests of url-encoded problems.    
    Query "TODO: we need create tests of url-encoded problems."
      null

  TYPE @commonQuery
  {
    "commonQueryField1": 1, // {optional: true}
    "commonQueryField2": 30 // {optional: true}
  }

  # Test Request

  POST /test-request/common
    Request
      "[!] Check `jsight • json` label below."

  PUT /test-request/type-jsight
    Description
      Check:
      1. [ ! ] Type `@cat`.
      2. [ ! ] `jsight • json` label.
    Request @cat

  PUT /test-request/type-array-of-regex-type
    Description
      Check:
      1. [ ! ] `[ @regexType ]`
      2. [ ! ] `jsight • json` label.
    Request [@regexType]

  PUT /test-request/type-array-of-jsight-type
    Description
      Check:
      1. [ ! ] `[ @cat ]`
      2. [ ! ] `jsight • json` label.
    Request [@cat]

  PUT /test-request/type-regex
    Description
      Check:
      1. [ ! ] Type `@regexType`.
      2. [ ! ] `jsight • json` label.    
    Request @regexType

  PATCH /test-request/notation-jsight
    Request jsight
      [
        "[!] Check `jsight • json` label below"
      ]

  DELETE /test-request/notation-regex
    Request regex
      /[!] Check `regex • plainString` label below./

  DELETE /test-request/notation-any
    Description
      [ ! ] Check `Any content allowed` label.
    Request any

  GET /test-request/notation-empty
    Description
      [ ! ] Check `No content allowed` label.
    Request empty

  POST /test-request/headers-and-body
    Description
      1. [ ! ] Check `Request headers` section is shown.
      2. [ ! ] Check `Request body` section is shown.
    Request
      Headers
        {
          ".": "[!] Check this header."
        }
      Body
        ["[!] Check this body"]

  PUT /test-request/body
    Description
      [ ! ] Check `Request body` section is shown.
    Request      
      Body
        {
          ".": "[!] Check this body"
        }

  # Test Responses
  GET /test-response/many
    100 any // [ ! ] Check `Any content allowed` label.
    101 any // [ ! ] Check `Any content allowed` label.
    200 any // [ ! ] Check `Any content allowed` label.
    201 any // [ ! ] Check `Any content allowed` label.
    300 any // [ ! ] Check `Any content allowed` label.
    301 any // [ ! ] Check `Any content allowed` label.
    400 any // [ ! ] Check `Any content allowed` label.
    401 any // [ ! ] Check `Any content allowed` label.
    500 any // [ ! ] Check `Any content allowed` label.
    501 any // [ ! ] Check `Any content allowed` label.

  GET /test-response/duplicates
    100 any   // [ ! ] Check `Any content allowed` label.
    100 empty // [ ! ] Check `No content allowed` label.
    100 @cat  // [ ! ] Check `@cat` type.
    200 any   // [ ! ] Check `Any content allowed` label.
    200 empty // [ ! ] Check `No content allowed` label.
    200 @cat  // [ ! ] Check `@cat` type.

  GET /test-response/annotation
    200 any // [ ! ] Check this annotation.

  POST /test-response/common
    200
      "[!] Check `jsight • json` label below."

  PUT /test-response/type-jsight
    Description
      Check:
      1. [ ! ] Type `@cat`.
      2. [ ! ] `jsight • json` label.
    201 @cat

  PUT /test-response/type-regex
    Description
      Check:
      1. [ ! ] Type `@regexType`.
      2. [ ! ] `jsight • json` label.    
    202 @regexType

  PUT /test-response/type-array-jsight-type
    Description
      Check:
      1. [ ! ] `[ @cat ]`
      2. [ ! ] `jsight • json` label.
    201 [@cat]

  PUT /test-response/type-array-regex-type
    Description
      Check:
      1. [ ! ] `[ @regexType ]`
      2. [ ! ] `jsight • json` label.
    202 [@regexType]

  PATCH /test-response/notation-jsight
    203 jsight
      {
        ".": "[!] Check `jsight • json` label below"
      }

  DELETE /test-response/notation-regex
    204 regex
      /[!] Check `regex • plainString` label below./

  DELETE /test-response/notation-any
    Description
      [ ! ] Check `Any content allowed` label.
    205 any

  GET /test-response/notation-empty
    Description
      [ ! ] Check `No content allowed` label.
    302 empty

  POST /test-response/headers-and-body
    Description
      1. [ ! ] Check `Response headers` section is shown.
      2. [ ! ] Check `Response body` section is shown.
    303
      Headers
        {
          ".": "[!] Check headers."
        }
      Body
        ["[!] Check body"]

  PUT /test-response/body
    Description
      [ ! ] Check `Response body` section is shown.
    304      
      Body
        {
          ".": "[!] Check this body."
        }

  # Test Headers

  GET /test-headers/common
    Description
      [ ! ] Check the header.
    Request
      Headers
        {
          "My-header": "[!] Check this header"
        }
      Body any

  GET /test-headers/allOf
    Description
      [ ! ] Check the headers:
       
      - Common-header-1
      - Common-header-2
    200
      Headers
        {} // {allOf: "@commonHeaders"}
      Body any
  GET  /test-headers/allOf-with-additional-headers   
    Description
      [ ! ] Check the headers:
       
      - Common-header-1
      - Common-header-2
      - Additional-header-1
    201
      Headers
        {  // {allOf: "@commonHeaders"}
          "Additional-header-1": "value"
        }
      Body any

  GET /test-headers/reference
    Description
      [ ! ] Check the headers:
       
      - Common-header-1
      - Common-header-2
    Request
      Headers
        @commonHeaders
      Body empty 

  GET /test-headers/additionalProperties 
    Description
      [ ! ] Check that in the table view mode it is mentioned somewhere, 
      that additional headers are forbidden.
    Request
      Headers
        { // {additionalProperties: false}
          "My-header": "Header value"
        }
      Body empty

  TYPE @commonHeaders
  {
    "Common-header-1": "value",
    "Common-header-2": "value"
  }

  # Test Body

  POST /test-body/common
    200
      Body
        "[!] Check `jsight • json` label"

  PUT /test-body/type-jsight
    Description
      1. [ ! ] Check type `@cat`.
      2. [ ! ] Check `jsight • json` label.
    201 
      Body @cat

  PUT /test-body/type-regex
    Description
      1. [ ! ] Check type `@regexType`.
      2. [ ! ] Check `jsight • json` label.
    Request
      Body @regexType

  PUT /test-body/type-array-jsight
    Description
      1. [ ! ] Check `[ @cat ]`.
      2. [ ! ] Check `jsight • json` label.
    201 
      Body [@cat]

  PUT /test-body/type-array-regex
    Description
      1. [ ! ] Check `[ @regexType ]`.
      2. [ ! ] Check `jsight • json` label.    
    Request
      Body [@regexType]

  PATCH /test-body/notation-jsight
    Request 
      Body jsight
        {
          "": "[!] Check `jsight • json` label."
        }

  DELETE /test-body/notation-regex
    204 
      Body regex
        /[!] Check `regex • plainString` label./

  DELETE /test-body/notation-any
    Description
      [ ! ] Check `Any content allowed` label.
    Request
      Body any

  GET /test-body/notation-empty
    302 // [ ! ] Check `No content allowed` label.
      Body empty

  # EMPTY and ANY schemas test

  GET /test-schema/empty-bodies
    Description
      [ ! ] Check `No content allowed` label.
    Request empty
    200 empty // [ ! ] Check `No content allowed` label.
    404 empty // [ ! ] Check `No content allowed` label.
    301       // [ ! ] Check `No content allowed` label.
      Body empty

  GET /test-schema/any-bodies
    Description
      [ ! ] Check `Any content allowed` label.
    Request any
    200 any // [ ! ] Check `Any content allowed` label.
    404 any // [ ! ] Check `Any content allowed` label.
    301     // [ ! ] Check `Any content allowed` label.
      Body any

  # Test schema view section

  GET /test-schema/view-footer-1
    Description
      1. [ ! ] Check `jsight • htmlFormEncoded` label in the **Code View** mode.
      2. [ ! ] Check `htmlFormEncoded` lable in the **Table View** mode.
    Query
      { 
        "parameter1": "value1"
      }
    200
      "[!] Check `jsight • json` label below."

  GET /test-schema/view-footer-2
    Description
      1. [ ! ] Check `jsight • noFormat` label in the **Code View** mode.
      2. [ ! ] Check `noFormat` lable in the **Table View** mode.
    Query noFormat
      ""
    200 regex
      /[!] Check `regex • plainString` label below./

  # Helpfull types

  TYPE @________________________THANKS_NO_NEED_TO_CHECK_TYPES_BELOW___________________
    "Thank you for walking through this test."

  TYPE @cat
  {
    "id"  : 1, // {min: 1}
    "name": "Tom" // {optional: true}
  }

  TYPE @regexType regex
    /.*/
