JSIGHT 0.3

# Test 
TYPE @testSectionButtonsZIndex /* 1) Open a details card.
                                  2) Press menu button.
                                  3) Check that menu panel 
                                     is not hiding under 
                                     the details card. */
  12 // {min: 1, max: 100}
  
# Test long one-line schemas
TYPE @testOneLineLongSchema // Test that it looks normally in code view and does not overlap notation label.
  "veryLongSchemaJustExtremelyLongveryLongSchemaJustExtremelyLongveryLongSchemaJustExtremelyLongveryLongSchemaJustExtremelyLong" // {type: "string"}

# Test TYPES By Example

TYPE @testStandardTypesByExample // Correspondence between the JSON and JSight Schema data types
{
  "string": "some string and escaped characters \" \\ \/ \b \f \n \r \t \u043f\u0440\u0438\u0432\u0435\u0442",
  "integerPositive": 1,
  "integerNegative": -123,
  "integerZero": 0,
  "floatPositive1": 1.2,
  "floatPositive2": 1.23,
  "floatNegative": -1.2,
  "floatZero": 0.0,
  # "decimalPositive1": 0.12, // {precision : 2} TODO: uncomment after bug fix.
  "decimalPositive1": 0.12, // {precision: 2}
  "decimalPositive2": 0.1,  // {precision: 1}
  "decimalNegative": -0.12, // {precision: 2}
  "boolean1": true,
  "boolean2": false,
  "null": null,
  "object": {
    "key": "value"
  },
  "array": [
    1,
    2.3,
    "abc",
    true,
    false,
    null
  ]
}

TYPE @testEmptyArray
    []

TYPE @testArrayOfScalars
    [
        "string",
        12,
        -34,
        56.78,
        -9.1,
        true,
        false,
        null
    ]

TYPE @testArrayOfObjects
    [
      {"aaa": 111},
      {"bbb": 222, "ccc": 333}
    ]

TYPE @testArrayOfArrays
    [
      [
        "aaa",
        "bbb"
      ],
      [
        1,
        2
      ]
    ]

# Test empty strings

TYPE @emptyStringInRoot
  ""

TYPE @emptyStringInArray
[
  ""
]

TYPE @emptyStringInProperty
{
  "checkEmptyValue": "",
  "": "checkEmptyKey"
}

# Test ANNOTATIONS

TYPE @testSingleLineAnnotationInRoot
  22 // Check annotation.

TYPE @testSingleLineAnnotationInArray
[ // Check annotation 1.
  "item" // Check annotation 2.
]

TYPE @testSingleLineAnnotationInObject
{ // Check annotation 1.
  "key": "value" // Check annotation 2.
}

TYPE @testMultiLineAnnotationInRoot
  22 /* Check 
        annotation.*/

TYPE @testMultiLineAnnotationInArray
[ /* Check 
     annotation 1.*/
  "item" /* Check 
    annotation 2. */
]

TYPE @testMultiLineAnnotationInObject
{ /* Check 
     annotation 1. */
  "key": "value" /* Check 
                    annotation 2. */
}

TYPE @testOneWordAnnotation // Check absense of "..." panel.
  "one word" // One  

TYPE @testTwoWordsAnnotation // Check absense of "..." panel.
  "two words" // Two words  

TYPE @testThreeWordsAnnotation // Check absense of "..." panel.
  "three words" // Three words annotation

TYPE @testThreeWordsAndDotAnnotation // Check absense of "..." panel.
  "three words with dot" // Three words annotation.

TYPE @testFourWordsAnnotation // Check "..." panel emerges.
  "four words" // The four words annotation

TYPE @testLongAnnotationInScalarWithOneRule // Check "..." panel emerges.
  "string" // {minLength: 1} - This is a long scalar annotation with one rule.

TYPE @testLongAnnotationInScalarWithTwoRules // Check "..." panel emerges.
  "string" // {minLength: 1, nullable: true} - This is a long scalar annotation with two rules.

TYPE @testLongAnnotationInArray // Check "..." panels in each annotation.
[ // This is a long array annotation.
  "string", // This is a long array item annotation.
  "string", // {minLength: 1} - This is a long array item annotation with one rule.
  "string"  // {minLength: 1, maxLength: 10} - This is a long array item annotation with two rules.
]

TYPE @testLongAnnotationInObject // Check "..." panels in each annotation.
{ // This is a long object annotation.
  "key1": "value", // This is a long object property annotation without rules.
  "key2": "value", // {minLength: 1} - This is a long object property annotation with one rule.
  "key3": "value"  // {minLength: 1, optional: true} - This is a long object property annotation with two rules.
}

TYPE @testExtraLongAnnotation
{
  "key": "value" /* {minLength: 0} - This
                    is a field
                    with a very long note. It must be:
                    1) cutted with "..." panel after first three words in "Collapse rules" mode,
                    2) it must NOT have line breaks inside. */
}

# Test RULES

TYPE @testRulesWithQuotes
{
  "id": 1 // {"min": 1, "max": 20} - Annotation.
}

TYPE @testRulesInRoot
  true // {const: true, nullable: true} - Annotation.

TYPE @testMultilineRules
[ /* 
      {minItems: 1,
       maxItems: 10} 
       - Annotation.
  */
  "item", /* {
              "nullable": true
            } - Annotation.
          */
  {
    "key": "value" /*

                    {optional: true}      - Annotation. */
  }
]

# Rule `type`

TYPE @testRuleTypeStandardTypes
{
  "integerPositive" : 1,    // {type: "integer"}
  "floatPositive1"  : 1.2,  // {type: "float"}
  "boolean1"        : true, // {type: "boolean"}
  "array": [ // {type: "array"}
    "array item" // {type: "string"}
  ],
  "object": { // {type: "object"}
    "objectField": null // {type: null}
  },
  "decimal" : 43.21, // {type: "decimal", precision: 2}
  "email": "name@domain.com", // {type: "email"}
  "uri": "https://domain.com/", // {type: "uri"}
  "date": "2021-12-16", // {type: "date"}
  "datetime": "2006-01-02T15:04:05+07:00", // {type: "datetime"}
  "uuid": "550e8400-e29b-41d4-a716-446655440000", // {type: "uuid"}
  "enumPlain": "white", // {type: "enum", enum: ["white", "black"]}
  "enumMixed": 2.3, // {type: "enum", enum: [1, 2.3, "a", "b", true, false, null]}
  "mixed": "abc", // {type: "mixed", or: [{type: "string"}, {type: "integer", min: 0}]}
  "any": 456 // {type: "any"}
}

TYPE @testRuleTypeUserTypeInRoot
  1234 // {type: "@catId"}

TYPE @testRuleTypeUserTypeInObject
{
  "catId": 123 // {type: "@catId"}
}

TYPE @testRuleTypeUserTypeInArray
[
  1234 // {type: "@catId"}
]

# TODO: test date and datetime more.

# Rule `optional`
TYPE @testRuleOptional
{
  "key1": "value1", // {optional: true}
  "key2": "value2"  // {optional: false}
}

# Rule `nullable`
TYPE @testRuleNullable
{
  "key1": "value1", // {nullable: true}
  "key2": "value2"  // {nullable: false}
}

# Rule `min`, `max`, `exclusiveMinimum`, `exclusiveMaximum`
TYPE @testRuleMinMaxExclusive
{
  "integer": 1,   // {min: -10, max: 10}
  "float"  : 2.3, // {min: 0, max: 10, exclusiveMinimum: true, exclusiveMaximum: true}
  "decimal": 4.5  // {precision: 1, min: -0.1, max: 5, exclusiveMinimum: false}
}

# Rule `precision`
TYPE @testRulePrecision
{
  "decimal1":  0.1, // {precision: 2}
  "decimal2": -2.34 // {precision: 2}
}

# Rules `minLength`, `maxLength`
TYPE @testRuleMinMaxLength
  "string" // {minLength: 2, maxLength: 12}

# Rule `regex`

TYPE @testRuleRegex
[
  "CAT-123" // {regex: "^[A-Z]+-\\d+$"}
]

# Rules `minItems`, `maxItems`
TYPE @testRuleMinMaxItems
{
  "array1": [ // {minItems: 1, maxItems: 200}
    "item"
  ]
}

# Rule `or`
TYPE @testRuleOrSimple // Check that it collapses in `Collapse rules` mode.
{
  "value": "A" // {or: [{type: "string"}, {type: "integer"}]}
}

TYPE @testRuleOrGroupOfRules // Check that it collapses in `Collapse rules` mode.
{
  "data": "abc" /* {or: [
                     {type: "string" , maxLength: 3}, 
                     {type: "integer", min: 0}
                   ]} */
}

TYPE @testRuleOrStandardTypes // Check that it is never collapsed in `Collapse rules` mode.
  "A" // {or: ["string", "integer"]}

TYPE @testRuleOrUserTypes // Check that it is never collapsed in `Collapse rules` mode.
{
  "data": 123 // {or: ["@dogId", "@catId"]}
}

TYPE @testRuleOrMixed // Check that it is never collapsed in `Collapse rules` mode.
{
  "data": "abc" /* {or: [
                     "@cat", 
                     {type: "string", maxLength: 3}
                   ]} */
}

# Rule `additionalProperties`

TYPE @testRuleAdditionalPropertiesBoolean
{ // {additionalProperties: true}
}

TYPE @testRuleAdditionalPropertiesStandardType
{ // {additionalProperties: "string"}
  "key": "value"
}

TYPE @testRuleAdditionalPropertiesUserType
{ // {additionalProperties: "@cat"}
  "key": @cat
}

# Rule `const`

TYPE @testRuleConst
  "OK" // {const: true}

# Rule `enum`

TYPE @testEnums
{
  "mixedEnum": 1, // {enum: [1, 2.0, 3.4, "5", "6", true, false, null]}
  "stringEnum": "S" // {enum: ["S","M","L"]}
}

# Rule `allOf`

TYPE @testSingleAllOfInRoot
{ // {allOf: "@cat"}
  "additionalField": 1
}

TYPE @testMultipleAllOfInRoot // Check also this case: 1) Open @dogId. 2) Close @dog. 3) Check that @dogId fields are also closed.
{ // {allOf: ["@dog", "@cat"]}
  "additionalField": 1
}

TYPE @testAllOfInside
{
  "singleAllOf": { // {allOf: "@cat"}
    "additionalField": "string"
  },
  "multipleAllOf": { // {allOf: ["@cat", "@dog"]}
    "additionalField": "string"
  }
}

TYPE @testAllOfRedundandComma // Check that there is no redundand comma after last @cat property
  {} // {allOf: "@cat"}

# Test allOf hierarchy

TYPE @level1 // Skip this.
{
  "level1Field1": 1,
  "level1Field2": 1
}

TYPE @level2 // Skip this.
{ // {allOf: "@level1"}
  "level2Field1": 2,
  "level2Field2": 2
}

TYPE @testAllOflevels // Test the fields order: 1-1-2-2-3-3.
{ // {allOf: "@level2"}
  "level3Field1": 3,
  "level3Field2": 3
}

# Test multiple allOf order

TYPE @testMultipleAllOfOrder1 // Must be 1-2-3-4.
{ // {allOf: ["@allOf1", "@allOf2"]} 
}

TYPE @testMultipleAllOfOrder2 // Must be 3-4-1-2.
{ // {allOf: ["@allOf2", "@allOf1"]}
}

TYPE @allOf1 // Skip it.
{
  "1": 1,
  "2": 2
}

TYPE @allOf2 // Skip it.
{
  "3": 3,
  "4": 4
}

# Test rules together

TYPE @testMaximumRules
{
  "object": {}, // {type: "object", optional: true, nullable: true, additionalProperties: true, allOf: "@cat"}
  "array" : [   // {type: "array", optional: true, nullable: true, minItems: 0, maxItems: 100}
    "item"
  ],
  "integer": 1, // {type: "integer", optional: true, nullable: true, const: true, min: 0, max: 10, exclusiveMinimum: true, exclusiveMaximum: false}
  "float": 2.3, // {type: "float", optional: true, nullable: true, const: true, min: 0, max: 10, exclusiveMinimum: true, exclusiveMaximum: false}
  "decimal": 4.56, // {type: "decimal", optional: true, nullable: true, const: true, min: 0, max: 10, exclusiveMinimum: true, exclusiveMaximum: false, precision: 2}
  "boolean": true, // {type: "boolean", optional: true, nullable: true, const: true}
  "string": "value", // {type: "string", optional: true, nullable: true, const: true, minLength: 0, maxLength: 100, regex: "^[A-Za-z]+$"}
  "email": "t@t.com", // {type: "email", optional: true, nullable: true, const: true}
  "uri": "http://t.com", // {type: "uri", optional: true, nullable: true, const: true}
  "date": "2021-12-16", // {type: "date", optional: true, nullable: true, const: true}
  "datetime": "2006-01-02T15:04:05+07:00", // {type: "datetime", optional: true, nullable: true, const: true}
  "uuid": "550e8400-e29b-41d4-a716-446655440000", // {type: "uuid", optional: true, nullable: true, const: true}
  "enum": "white", // {type: "enum", optional: true, nullable: true, const: true, enum: ["white", "black"]}
  "mixed": "abc", // {type: "mixed", optional: true, nullable: true, or: [{type: "string"}, {type: "integer", min: 0}]}
  "any": 789, // {type: "any", optional: true, nullable: true}
  "null": null, // {type: "null", optional: true, nullable: true, const: true}
  "userType1": @cat,  // {optional: true, nullable: true}
  "userType2": 12 // {type: "@catId", optional: true, nullable: true}
}

# USER TYPE references - check scalar types

TYPE @testUserTypeReferenceScalarInRootSingle
  @catId

TYPE @testUserTypeReferenceScalarInRootMultiple
  @catId | @dogId | @pigId

TYPE @testUserTypeReferenceScalar
{
  "single"  : @catId,
  "multiple": @catId | @dogId,
  "three"   : @catId | @pigId | @dogId,
  "array"   : [
    @catId,
    @catId | @dogId,
    @catId | @dogId | @pigId
  ]
}

# USER TYPE references - check non scalar types

TYPE @testUserTypeReferenceInRootSingle
  @cat

TYPE @testUserTypeReferenceInRootMultiple
  @cat | @dog | @pig

TYPE @testUserTypeReferences
{
  "single"  : @cat,
  "multiple": @cat | @dog,
  "three"   : @cat | @pig | @dog,
  "array"   : [
    @cat,
    @cat | @dog,
    @cat | @dog | @pig
  ]
}

# USER TYPE references - check recursion

TYPE @testShortRecursion
{
  "testShortRecursion": @testShortRecursion,
  "testLongRecursion" : @testLongRecursion,
  "testBothRecursions": @testShortRecursion | @testLongRecursion
}

TYPE @testLongRecursion
{
  "testShortRecursion": @testShortRecursion
}

# Test USER TYPE reference in key
TYPE @testUserTypeReferenceInKey
{
  @catId: @cat
}

TYPE @testUserTypeReferenceInKeyInteger
{
  @catId: 12
}

TYPE @testFakeUserTypeReferenceInKey
{
  "@catId": 1 // It must be just a string "@catId".
}

TYPE @testUserTypeReferenceInKeyWithRules
{
  @catId: @cat // {optional: true}
}

TYPE @testPseudoDuplicates
{
  @catId  : 1
  # "@catId": 1  TODO: uncomment when fixed.
}

# Test inline rules / collapse rules
TYPE @testInlineRulesCollapseRules // Switch mode to "Inline Rules" and see how it works.
{
  "checkInteger" : 1,  // {nullable: true , type: "integer", optional: true} - Short note.
  "checkEnum"    : 2,  // {nullable: false, optional: true, enum: [1, 2], type: "enum"} - Short note.
  "checkMixedEnum": 1, // {enum: [1, 2, 1.1, "3", "4", true, false, null]}
  "checkMixed"   : 12, // {nullable: false, or: ["@catId", "@dogId"], type: "mixed"} - Long note must be shorten while collapse rules mode.
  "checkObject"  : {}, // {nullable: true, allOf: "@cat", additionalProperties: true} - Short note.
  "checkArray"   : [   // {minItems: 0, maxItems: 10, optional: true}
    "some string" // {minLength: 1, maxLength: 100, regex: ".*", nullable: true}
  ]
}

# Test moving some rules to beginning

TYPE @testMovingSomeRulesToFirstPlace
{
  "checkTypeMoves" : 1,  // {nullable: true , type: "integer"}
  "checkEnumMoves" : 2,  // {nullable: false, optional: true, enum: [1, 2]}
  "checkOrMoves"   : 12, // {nullable: false, or: ["@catId", "@dogId"]}
  "checkAllOfMoves": {}  // {nullable: true, allOf: "@cat"}
}

# Test required fields marks on the left
TYPE @testRequiredFieldsMarks
{
  "required1": "required",
  "optional1": "optional", // {optional: true}
  "required2": {
    "optional3": 1,            // {optional: true}
    "required3": "2002-01-01", // {optional: false, "type": "date"}
    @catId: 12.1 // Required.
  },
  "optional3": [ // {optional: true}
    "optionalItem1",
    "optionalItem2"
  ],
  "required4": @catId,
  "optional4": @catId, // {optional: true}
  @catId: true // {optional: true} - Optional.
}

# Test Expand types button

TYPE @testExpandTypesRoot // Switch to "Expand types" mode. Check that only first level is expanding. Then check collapsing.
  @cat

TYPE @testExpandTypesInside // Switch to "Expand types" mode. Check that only first level is expanding. Then check collapsing.
{
  @catId      : @cat,
  "twoTypes"  : @cat | @dog,
  "threeTypes": @cat | @dog | @pig,
  "array": [
    @cat,
    @cat | @dog,
    @cat | @dog | @pig
  ],
  "allOfOne": { // {allOf: "@cat"}
    "additionalField": "value"
  },
  "allOfTwo": { // {allOf: ["@cat", "@dog"]}
    "additionalField": "value"
  },
  "allOfThree": { // {allOf: ["@cat", "@dog", "@pig"]}
    "additionalField": "value"
  }
}

TYPE @testExpandTypesNotExpandOrRule // Press `Expand types` and check that types in or rule are not expanded.
{
  "data": 123 // {or: ["@dogId", "@catId"]}
}

# TODO: test regex TYPES in schemas

# Test conflict between opening type and opening details card
TYPE @testOpenTypeWithoutOpeningSidebar // Check that when you open or close type, sidebar card details is not opened or closed.
{
  "field": 123 // {type: "@catId", optional: true, nullable: true}
}

# Helpfull types

TYPE @NO_NEED_TO_CHECK_TYPES_BELOW
  "Thank you! No need to check further."

TYPE @cat
{
  "catId": @catId,
  "catName": "Tom"
}

TYPE @dog
{
  "dogId": @dogId,
  "dogField": 1
}

TYPE @pig
{
  "pigId": "12",
  "pigField": "value"
}

TYPE @catId
  12 // {min: 1} - A cat's id.

TYPE @dogId
  "DOG-123" // Dog's id.

TYPE @pigId
  "PIG-123" // Pig's id.

TYPE @catList
[
  @cat
]  